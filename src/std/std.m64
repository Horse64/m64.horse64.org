## @module std
# Copyright (c) 2024, ellie/@ell1e & m64 stdlib authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

c_import "stdlib.h" as c_stdlib
c_import "stdio.h" as c_stdlib
c_import "string.h" as c_stdlib

import std.limit as limit

const str_stack_bytes <- size = 32
const array_size_unset <- size = limit.size_max

struct str {
    union {
        struct {
            var _stack_buf <- byte array[str_stack_bytes]
            var _stack_buf_len <- u16
        }
        struct {
            var _heap_buf <- byte array
        }
    }
    var _on_heap <- bool
}

func str.init_as_copy(
        other_str <- readonly str
        ) failable override {
    return self.copy_from(other_str)
}

func str.init_from_inline_c_str(
        c_str <- readonly byte c_array
        ) failable override {
    var c_array <- readonly byte array =
        as(readonly byte array, c_str)
    c_array.len = c_str_nulpos(c_str)
    self.init_from_bytebuf(c_array)
    if failed(self.init_from_bytebuf) {
        return failed
    }
}

func str.init_from_bytebuf(
        c_str <- readonly byte array
        ) failable override {
    var str_len <- size
    if c_str.len == array_size_unset {
        str_len = c_str_nulpos(c_str.data)
    } else {
        str_len = c_str.len
    }
    if str_len < str_stack_bytes {
        c_stdlib.memcpy(
            c_str.data, self._stack_buf, str_len
        )
        c_str.data[str_len] = 0
        self._stack_buf_len = str_len + 1
        return
    }
    self._on_heap = yes
    #self._heap_buf = alloc_array(size_of(deref(self._heap_buf)),
    #    str_len + 1
    #)  # FIXME.
    self._heap_buf.data = alloc(str_len + 1)
    if failed(alloc) {
        return failed
    }
    memcpy(
        self._heap_buf.data, c_str.data, str_len
    )
    self._heap_buf.data[str_len] = 0
    self._heap_buf.len = str_len + 1
}

func str.init failable {
    self._on_heap = no
    self._stack_buf[1] = '\0'
    self._stack_buf_len = 1
    return self
}

func str.add(other_str <- readonly str) failable {
    var other_len <- size = other_str.len
    var other_data <- byte array = other_str._stack_buf
    if other_str._on_heap {
        other_data = other_str._heap_buf
    }
    var other_array <- readonly byte array =
        as(readonly byte array, other_data)
    other_array.len = other_len
    return self.add(other_array)
}

func str.add_bytebuf(
        c_str <- readonly byte array
        ) failable override {
    if c_str.len == array_size_unset {
        c_str.len = c_str_nulpos(c_str.data)
    }
    var own_len <- size = self.len
    var needed_len <- size = c_str.len + own_len + 1
    if self._on_heap or needed_len > str_stack_bytes {
        var self_data <- byte array = self._stack_buf
        var clear_ptr <- byte array = none
        if self._on_heap {
            self_data = self._heap_buf
            clear_ptr = self._heap_buf
        }
        self._heap_buf.data = alloc(needed_len)
        if failed(alloc) {
            self._heap_buf.data = clear_ptr
            return failed
        }
        memcpy(self_data, self._heap_buf, own_len)
        memcpy(
            c_str, self._heap_buf + own_len, c_str.len
        )
        self._heap_buf[own_len + c_str.len + 1] = 0
        unalloc(clear_ptr.data)
        self._heap_buf.len = needed_len
        return
    }
    memcpy(
        c_str, self._stack_buf.data + own_len, c_str.len
    )
    self._stack_buf[own_len + c_str.len + 1] = 0
    self._stack_buf.len = needed_len
}

func str.len -> size {
    if self._on_heap {
        return self._heap_buf.len - 1
    }
    return self._stack_buf_len - 1
}

func str.destroy {
    if self._on_heap {
        unalloc(self._heap_buf)
    }
}

func str.copy_from(other_str <- readonly str) -> str ref {
    if not other_str._on_heap {
        if self._on_heap {
            unalloc(self._heap_buf.data)
        }
        memcpy(
            as_ref(other_str), as_ref(self), size_of(self)
        )
    } else {
        self._on_heap = yes
        self._heap_buf = alloc(
            other_str._heap_buf.len
        )
        if self._heap_buf == none {
            return none
        }
        memcpy(
            other_str._heap_buf,
            self._heap_buf.data,
            other_str.heap_buf.len
        )
        self._heap_buf.len = other_str._heap_buf.len
    }
    return str
}

func str.get_c_str -> readonly byte c_array {
    var result <- readonly byte c_array
    if self._on_heap {
        result = self._heap_buf.data
        return result
    }
    result = as(readonly byte c_array, self._stack_buf)
    return result
}

func c_str_nulpos(str_ref <- readonly byte c_array) -> size {
    return c_stdlib.strlen(str_ref)
}

func memcpy(origin <- readonly byte c_array, dest <- byte c_array,
            amount <- size) {
    c_stdlib.memmove(dest, origin, amount)
}

func alloc(amount <- size) -> any ref {
    return c_stdlib.malloc(amount)
}

func unalloc(ptr <- any array) -> any ref {
    return c_stdlib.free(ptr)
}

