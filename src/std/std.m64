## @module std
# Copyright (c) 2024, ellie/@ell1e & m64 stdlib authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

c_import "stdlib.h" as c_stdlib
c_import "stdio.h" as c_stdlib
c_import "string.h" as c_stdlib

import std.limit as limit

const str_stack_bytes <- size = 32
const array_size_unset <- size = limit.size_max

struct str {
    union {
        struct {
            var _stack_buf <- byte c_array[str_stack_bytes]
            var _stack_buf_len <- u16
        }
        struct {
            var _heap_buf <- byte array
        }
    }
    var _on_heap <- bool
}

func str.init_as_copy(
        other_str <- readonly str implicit ref
        ) failable override {
    self.copy_from(other_str)
    if failed(self.copy_from) {
        return failed
    }
}

func str.init_from_inline_c_str(
        c_str <- readonly byte c_array
        ) failable override {
    var c_array_var <- readonly byte array
    c_array_var.data = c_str
    c_array_var.len = c_str_nulpos(c_str)
    self.init_from_bytebuf(c_array_var)
    if failed(self.init_from_bytebuf) {
        return failed
    }
}

func str.init_from_bytebuf(
        c_str <- readonly byte array
        ) failable override {
    var str_len <- size
    if c_str.len == array_size_unset {
        str_len = c_str_nulpos(c_str.data)
    } else {
        str_len = c_str.len
    }
    if str_len < str_stack_bytes {
        c_stdlib.memcpy(
            c_str.data, self._stack_buf, str_len
        )
        self._stack_buf[str_len + 1] = 0
        self._stack_buf_len = str_len + 1
        return
    }
    self._on_heap = yes
    self._heap_buf = alloc_array(
        size_of(self._heap_buf.data),
        str_len + 1
    )
    if failed(alloc_array) {
        return failed
    }
    memcpy(
        c_str.data, self._heap_buf.data, str_len
    )
    self._heap_buf[str_len + 1] = 0
    self._heap_buf.len = str_len + 1
}

func str.init failable {
    self._on_heap = no
    self._stack_buf[1] = 0
    self._stack_buf_len = 1
    return self
}

func str.add(other_str <- readonly str implicit ref) failable {
    var other_len <- size = other_str.len
    var other_data <- byte c_array = other_str._stack_buf
    if other_str._on_heap {
        other_data = other_str._heap_buf
    }
    var other_array <- readonly byte array
    other_array.data = other_data
    other_array.len = other_len
    self.add(other_array)
    if failed(self.add) {
        return failed
    }
}

func str.add_bytebuf(
        c_str <- readonly byte array
        ) failable override {
    var c_str_len <- size = c_str.len
    if c_str_len == array_size_unset {
        c_str_len = c_str_nulpos(c_str.data)
    }
    var own_len <- size = self.len
    var needed_len <- size = c_str_len + own_len + 1
    if self._on_heap or needed_len > str_stack_bytes {
        var self_data <- byte c_array = self._stack_buf
        var clear_data <- byte c_array = none
        if self._on_heap {
            self_data = self._heap_buf
            clear_data = self._heap_buf.data
        }
        self._heap_buf.data = alloc(needed_len)
        if failed(alloc) {
            self._heap_buf.data = clear_data
            return failed
        }
        memcpy(self_data, self._heap_buf.data, own_len)
        memcpy(
            c_str.data, self._heap_buf.data + own_len, c_str_len
        )
        self._heap_buf[own_len + c_str_len + 1] = 0
        unalloc(clear_data)
        self._heap_buf.len = needed_len
        return
    }
    memcpy(
        c_str.data, self._stack_buf + own_len, c_str_len
    )
    self._stack_buf[own_len + c_str_len + 1] = 0
    self._stack_buf_len = needed_len
}

func str.len readonly -> size {
    if self._on_heap {
        return self._heap_buf.len - 1
    }
    return self._stack_buf_len - 1
}

func str.destroy {
    if self._on_heap {
        unalloc(self._heap_buf.data)
    }
}

func str.copy_from(other_str <- readonly str implicit ref) failable {
    if not other_str._on_heap {
        if self._on_heap {
            unalloc(self._heap_buf.data)
        }
        memcpy(
            as_ref(other_str), as_ref(self),
            size_of(self)
        )
        assert(not self._on_heap)
    } else {
        self._on_heap = yes
        self._heap_buf = alloc(
            other_str._heap_buf.len
        )
        if failed(alloc) {
            return failed
        }
        memcpy(
            other_str._heap_buf,
            self._heap_buf.data,
            other_str._heap_buf.len
        )
        self._heap_buf.len = other_str._heap_buf.len
    }
}

func str.get_c_str readonly -> readonly byte c_array {
    var result <- readonly byte c_array
    if self._on_heap {
        result = self._heap_buf.data
        return result
    }
    result = as(readonly byte c_array, self._stack_buf)
    return result
}

func c_str_nulpos(str_ref <- readonly byte c_array) -> size {
    var amount <- size = c_stdlib.strlen(str_ref)
    if amount == limit.size_max {
        # XXX: avoid clash with array_size_unset!
        amount = limit.size_max - 1
    }
    return amount
}

func memcpy(origin <- readonly any ref, dest <- any ref,
            amount <- size) {
    c_stdlib.memmove(dest, origin, amount)
}

func alloc(amount <- size) failable -> any ref {
    var result <- any ref = c_stdlib.malloc(amount)
    if result == none {
        return failed
    }
    return result
}

func alloc_array(item_size <- size, item_count <- size
                ) failable -> any array {
    var result <- any array
    if item_count > 0 {
        result.data = c_stdlib.malloc(
            item_size * item_count
        )
        if result.data == none {
            return failed
        }
    }
    result.len = item_count
    return result
}

func unalloc(ptr <- any c_array) {
    c_stdlib.free(ptr)
}

func print(data <- readonly byte array) {
    var print_amount <- size = data.len
    if print_amount == array_size_unset {
        print_amount = c_str_nulpos(data.data)
    }
    print_c_array(data.data, print_amount)
}

func print_c_array(data <- readonly byte c_array,
        data_len <- size) override {
    var i <- size = 1
    while i <= data_len {
        c_stdlib.printf(
            "%c", data[i]
        )
        i += 1
    }
    c_stdlib.printf("\n")
}

func print_str(my_str <- readonly str implicit ref) override {
    if my_str._on_heap {
        if my_str._heap_buf.len > 1 {
            print_c_array(
                my_str._heap_buf.data,
                my_str._heap_buf.len - 1
            )
        }
    } else {
        if my_str._stack_buf_len > 1 {
            print_c_array(
                my_str._stack_buf,
                my_str._stack_buf_len
            )
        }
    }
}

